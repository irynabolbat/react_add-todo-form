{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","utils/helpers.ts","utils/utils.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","map","username","creatTodoId","Math","max","getUserById","userId","usersFromServer","find","visibleTodos","App","useState","setTodos","setTitle","setCompleted","setUserId","isUserError","setIsUserError","isTitleError","setIsTitleError","action","method","onSubmit","event","preventDefault","newTodo","prevState","htmlFor","type","placeholder","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c6bb1a4.chunk.js","sourcesContent":["import { User } from '../../types/types';\n\ntype Prop = {\n  user: User;\n};\n\nexport const UserInfo:React.FC<Prop> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user?.email}`}\n    >\n      {user?.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\n\nimport { UserInfo } from '../UserInfo';\nimport { ToDo } from '../../types/types';\n\ntype Prop = {\n  todo: ToDo;\n};\n\nexport const TodoInfo:React.FC<Prop> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n    </article>\n  );\n};\n","import { ToDo } from '../../types/types';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Prop = {\n  todos: ToDo[]\n};\n\nexport const TodoList:React.FC<Prop> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { ToDo } from '../types/types';\n\nexport function creatTodoId(todos: ToDo[]) {\n  const max = Math.max(...todos.map(todo => todo.id));\n\n  return max + 1;\n}\n","import usersFromServer from '../api/users';\nimport todosFromServer from '../api/todos';\n\nexport function getUserById(userId: number) {\n  return usersFromServer.find(user => user.id === userId);\n}\n\nexport const visibleTodos = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { ChangeEvent, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport { creatTodoId } from './utils/helpers';\nimport { ToDo } from './types/types';\nimport { getUserById, visibleTodos } from './utils/utils';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<ToDo[]>(visibleTodos);\n  const [title, setTitle] = useState<string>('');\n  const [completed, setCompleted] = useState<boolean>(false);\n  const [userId, setUserId] = useState<number>(0);\n  const [isUserError, setIsUserError] = useState<boolean>(false);\n  const [isTitleError, setIsTitleError] = useState<boolean>(false);\n\n  function handleSetUserId(event: ChangeEvent<HTMLSelectElement>) {\n    setUserId(+event.target.value);\n    setIsUserError(false);\n  }\n\n  function handleSetTitle(event: ChangeEvent<HTMLInputElement>) {\n    setTitle(event.target.value);\n    setIsTitleError(false);\n  }\n\n  function handleAdd(newTodo: ToDo) {\n    setTodos(prevState => [...prevState, newTodo]);\n  }\n\n  const reset = () => {\n    setTitle('');\n    setCompleted(false);\n    setUserId(0);\n    setIsUserError(false);\n    setIsTitleError(false);\n  };\n\n  function addToDo(event: React.FormEvent) {\n    event.preventDefault();\n\n    if (!title || !userId) {\n      setIsTitleError(!title);\n      setIsUserError(!userId);\n\n      return;\n    }\n\n    handleAdd({\n      id: creatTodoId(todos),\n      title,\n      completed,\n      userId,\n      user: getUserById(userId),\n    });\n\n    reset();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={addToDo}>\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Please enter a title\"\n            value={title}\n            onChange={handleSetTitle}\n          />\n\n          {isTitleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"userSelect\">User:</label>\n\n          <select\n            id=\"userSelect\"\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={handleSetUserId}\n          >\n\n            <option value=\"0\">Choose a user</option>\n            {usersFromServer.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {isUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}